<?xml version="1.0" encoding="UTF-8"?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace用于与DAO层的接口类进行绑定,这样我们无需实现DAO层的接口
    类,其接口类就能够自动的找到相关的SQL语句进行绑定实现-->
<mapper namespace="com.luo.dao.EmployeeDao">
<!--设置domain类和数据库中表的字段一一对应！-->
	<resultMap id="BaseResultMap" type="Employee">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="name" property="name" jdbcType="VARCHAR"/>
		<result column="sex" property="sex" jdbcType="VARCHAR"/>
		<result column="age" property="age" jdbcType="INTEGER" />
		<result column="salary" property="salary" jdbcType="VARCHAR"/>
		<result column="address" property="address" jdbcType="VARCHAR" />
	</resultMap>
	
	<sql id="Base_Column_List" >
    id,name,sex,age,salary,address
 	 </sql>

	<!-- 查询总的社员记录 -->
	<!--select表示查询,它的id名称必须与DAO层接口的方法名相同,否则无法绑定-->
	<select id="selectEmployeeAll" resultType="Employee" resultMap="BaseResultMap">
		SELECT <include refid="Base_Column_List"/> FROM employee
	</select>
	
	<!-- 根据分页数据start 和size查询数据 -->
	<select id="selectEmployeeByPage" resultType="Employee" resultMap="BaseResultMap">
		SELECT <include refid="Base_Column_List"/> FROM employee 
		<if test="start != null and size != null">
		limit #{start},#{size}
		</if>
	</select>
	
	<!-- 根据id查询单条记录 -->
	<select id="selectEmployeeById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
		SELECT <include refid="Base_Column_List"/> FROM employee WHERE id = #{id,jdbcType=INTEGER}
	</select>
	
	<!-- 查询记录数 -->
	<select id="selectCount" resultType="int">
		SELECT count(1) FROM employee
	</select>
	
	
	
	<!-- 插入社员记录
	useGeneratedKeys设置为"true"表明要MyBatis获取由数据库自动生成的主键；keyProperty="id"指定把获取到的主键值注入到Employee的id属性-->
	<insert id="insertEmployee" parameterType="Employee" useGeneratedKeys="true" keyProperty="id">  
        INSERT INTO employee (name,sex,age,salary,address)
        		VALUES(#{name,jdbcType=VARCHAR},#{sex,jdbcType=VARCHAR},#{age,jdbcType=INTEGER},
        		#{salary,jdbcType=VARCHAR},#{address,jdbcType=VARCHAR})
	</insert>
	
	<!-- 更新Employee信息 -->  
	<update id="updateEmployeeById" parameterType="Employee">  
        UPDATE employee  
            SET employee.name = #{name,jdbcType=VARCHAR},   
            	employee.sex = #{sex,jdbcType=VARCHAR},
            	employee.age = #{age,jdbcType=INTEGER},
                employee.salary = #{salary,jdbcType=VARCHAR},
                employee.address = #{address,jdbcType=VARCHAR}
         WHERE employee.id = #{id,jdbcType=INTEGER}  
	</update> 
	
	<!-- 删除社员 -->  
	<delete id="deleteEmployeeById" parameterType="java.lang.Integer">  
        DELETE FROM employee WHERE id = #{id,jdbcType=INTEGER}  
	</delete> 
	
	
	<!-- 模糊查询 -->
	<select id="selectEmployeeByName" parameterType="java.lang.String" resultMap="BaseResultMap">
		<if test="_parameter != '' and _parameter != null">
			SELECT <include refid="Base_Column_List"/> FROM employee WHERE name LIKE CONCAT(CONCAT('%', #{name}), '%')
		</if>
	</select>
	
	
</mapper>